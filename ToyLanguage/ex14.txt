ID: 1
2025/02/05 11:37:20
Execution Stack:
(Ref int a; (NewStmt(a, 20); (int v; (v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a)))))))
Heap:

Symbol Table:

Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:20
Execution Stack:
Ref int a
(NewStmt(a, 20); (int v; (v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a))))))
Heap:

Symbol Table:

Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:20
Execution Stack:
Ref int a
(NewStmt(a, 20); (int v; (v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a))))))
Heap:

Symbol Table:

Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:20
Execution Stack:
(NewStmt(a, 20); (int v; (v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a))))))
Heap:

Symbol Table:
a --> (0, int)
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:20
Execution Stack:
(NewStmt(a, 20); (int v; (v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a))))))
Heap:

Symbol Table:
a --> (0, int)
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:20
Execution Stack:
NewStmt(a, 20)
(int v; (v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a)))))
Heap:

Symbol Table:
a --> (0, int)
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:20
Execution Stack:
NewStmt(a, 20)
(int v; (v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a)))))
Heap:

Symbol Table:
a --> (0, int)
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:20
Execution Stack:
(int v; (v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a)))))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:21
Execution Stack:
(int v; (v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a)))))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:21
Execution Stack:
int v
(v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a))))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:21
Execution Stack:
int v
(v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a))))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:21
Execution Stack:
(v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a))))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:21
Execution Stack:
(v = 0; (While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a))))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:21
Execution Stack:
v = 0
(While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a)))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:22
Execution Stack:
v = 0
(While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a)))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:22
Execution Stack:
(While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a)))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:22
Execution Stack:
(While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }; print(readFromHeap(a)))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:22
Execution Stack:
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:22
Execution Stack:
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:22
Execution Stack:
(fork((print(v); v = v * readFromHeap(a))); v = v + 1)
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:23
Execution Stack:
(fork((print(v); v = v * readFromHeap(a))); v = v + 1)
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:23
Execution Stack:
fork((print(v); v = v * readFromHeap(a)))
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:23
Execution Stack:
fork((print(v); v = v * readFromHeap(a)))
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:23
Execution Stack:
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 2
2025/02/05 11:37:23
Execution Stack:
(print(v); v = v * readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:23
Execution Stack:
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 2
2025/02/05 11:37:23
Execution Stack:
(print(v); v = v * readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:23
Execution Stack:
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:

Lock Table:

{}
--------------------------------------------------
ID: 2
2025/02/05 11:37:23
Execution Stack:
print(v)
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:23
Execution Stack:
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:

Lock Table:

{}
--------------------------------------------------
ID: 2
2025/02/05 11:37:23
Execution Stack:
print(v)
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:

Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:23
Execution Stack:
(fork((print(v); v = v * readFromHeap(a))); v = v + 1)
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 2
2025/02/05 11:37:23
Execution Stack:
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:24
Execution Stack:
(fork((print(v); v = v * readFromHeap(a))); v = v + 1)
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 2
2025/02/05 11:37:24
Execution Stack:
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:24
Execution Stack:
fork((print(v); v = v * readFromHeap(a)))
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 2
2025/02/05 11:37:24
Execution Stack:

Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 0
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:24
Execution Stack:
fork((print(v); v = v * readFromHeap(a)))
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:24
Execution Stack:
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 3
2025/02/05 11:37:24
Execution Stack:
(print(v); v = v * readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:25
Execution Stack:
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 3
2025/02/05 11:37:25
Execution Stack:
(print(v); v = v * readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:25
Execution Stack:
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 3
2025/02/05 11:37:25
Execution Stack:
print(v)
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:27
Execution Stack:
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 3
2025/02/05 11:37:27
Execution Stack:
print(v)
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:27
Execution Stack:
(fork((print(v); v = v * readFromHeap(a))); v = v + 1)
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 3
2025/02/05 11:37:27
Execution Stack:
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:46
Execution Stack:
(fork((print(v); v = v * readFromHeap(a))); v = v + 1)
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 3
2025/02/05 11:37:46
Execution Stack:
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 1
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:46
Execution Stack:
fork((print(v); v = v * readFromHeap(a)))
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 3
2025/02/05 11:37:46
Execution Stack:

Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 20
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:50
Execution Stack:
fork((print(v); v = v * readFromHeap(a)))
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:50
Execution Stack:
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 4
2025/02/05 11:37:50
Execution Stack:
(print(v); v = v * readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:50
Execution Stack:
v = v + 1
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 4
2025/02/05 11:37:50
Execution Stack:
(print(v); v = v * readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:50
Execution Stack:
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 3
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 4
2025/02/05 11:37:50
Execution Stack:
print(v)
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:51
Execution Stack:
While (v < 3) { (fork((print(v); v = v * readFromHeap(a))); v = v + 1) }
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 3
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 4
2025/02/05 11:37:51
Execution Stack:
print(v)
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:51
Execution Stack:
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 3
Output:
0
1
2
Lock Table:

{}
--------------------------------------------------
ID: 4
2025/02/05 11:37:51
Execution Stack:
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
2
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:51
Execution Stack:
print(readFromHeap(a))
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 3
Output:
0
1
2
Lock Table:

{}
--------------------------------------------------
ID: 4
2025/02/05 11:37:51
Execution Stack:
v = v * readFromHeap(a)
Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 2
Output:
0
1
2
Lock Table:

{}
--------------------------------------------------
ID: 1
2025/02/05 11:37:51
Execution Stack:

Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 3
Output:
0
1
2
20
Lock Table:

{}
--------------------------------------------------
ID: 4
2025/02/05 11:37:51
Execution Stack:

Heap:
1 --> 20
Symbol Table:
a --> (1, int)
v --> 40
Output:
0
1
2
20
Lock Table:

{}
--------------------------------------------------
